from aiogram import Bot, Dispatcher, executor, types
import json, random, os, asyncio
from datetime import datetime, timedelta

# === –ù–ê–°–¢–†–û–ô–ö–ê ===
bot = Bot(token=os.getenv("BOT_TOKEN"))  # –¢–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
dp = Dispatcher(bot)
PROGRESS_FILE = "progress.json"
DATE_FMT = "%Y-%m-%d"
ADMIN_ID = 288158839  # —Ç–≤–æ–π chat_id

# === –£–¢–ò–õ–ò–¢–´ ===
def today():
    return datetime.now().strftime(DATE_FMT)

def is_due(date_str):
    if not date_str:
        return False
    try:
        date = datetime.strptime(date_str, DATE_FMT).date()
    except Exception:
        return False
    return datetime.now().date() >= date

def load_progress():
    if os.path.exists(PROGRESS_FILE):
        with open(PROGRESS_FILE, encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_progress(progress):
    with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
        json.dump(progress, f, ensure_ascii=False, indent=2)

def split_text(text, limit=3500):
    return [text[i:i + limit] for i in range(0, len(text), limit)]

# === –ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–´–ï –¶–ò–¢–ê–¢–´ ===
QUOTES = [
    "We are what we repeatedly do. Excellence, then, is not an act, but a habit. ‚Äì Aristotle",
    "Discipline equals freedom. ‚Äì Jocko Willink",
    "Medicine is mostly controlled curiosity.",
    "–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞.",
    "Tiny progress every day beats occasional bursts.",
    "–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å ‚Äì –ª—É—á—à–∏–π –≤–∏–¥ —Ç–∞–ª–∞–Ω—Ç–∞.",
    "Half of medicine is patience. The other half is coffee.",
    "Practice turns chaos into instinct.",
    "The best doctors never stop being students.",
    "–¢—ã —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–≤–µ—Ç–∞–º."
]

# === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===
ACHIEVEMENTS = {
    1: "üë∂ –ü–µ—Ä–≤—ã–π –≤–¥–æ—Ö",
    2: "üë£ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
    3: "üéØ –û—Ä–¥–∏–Ω–∞—Ç–æ—Ä-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç",
    5: "‚ö°Ô∏è –ú–æ–∑–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è",
    7: "üí™ –ì–∏–≥–∞–Ω—Ç –ø–µ–¥–∏–∞—Ç—Ä",
    10: "üåä –í—Ä–∞—á –Ω–∞ –≤–æ–ª–Ω–µ",
    14: "‚òïÔ∏è –î–æ–∫—Ç–æ—Ä –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö",
    21: "ü©∫ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å ‚Äì –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ—Ñ–∏",
    30: "üìö –ì—É—Ä—É –≥–∞–π–¥–ª–∞–π–Ω–æ–≤",
    60: "üèÖ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤",
    90: "üíé –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –Ω–µ–æ–Ω–∞—Ç–æ–ª–æ–≥",
    180: "üî• –ö–∞–Ω–¥–∏–¥–∞—Ç –±–µ—Å—Å–º–µ—Ä—Ç–∏—è",
    365: "üëë –õ–µ–≥–µ–Ω–¥–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏—è"
}

# === –î–ê–ù–ù–´–ï ===
progress = load_progress()
with open("questions.json", encoding="utf-8") as f:
    questions = json.load(f)
Q_BY_ID = {int(q["id"]): q for q in questions}
TOPICS = sorted(set(q["topic"] for q in questions))

# === –°–¢–ê–†–¢ ===
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    uid = str(message.chat.id)
    uname = message.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    progress.setdefault(uid, {
        "name": uname,
        "cards": {},
        "topics": {},
        "streak": 0,
        "last_review": None,
        "goal_per_day": 10,
        "done_today": 0
    })
    save_progress(progress)
    kb = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚è≠ –ù–∞—á–∞—Ç—å", callback_data="next"))
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {uname}!\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—å –ø–µ–¥–∏–∞—Ç—Ä–∏—é —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º.\n\n"
        "üí° –û—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –∑–∞–≤—Ç—Ä–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ‚Äì —á–µ—Ä–µ–∑ 2, 4, 8 –∏ —Ç.–¥. –¥–Ω–µ–π.\n"
        "üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å: 10 –∫–∞—Ä—Ç–æ—á–µ–∫ (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ /goal 15)\n\n"
        "üí¨ We are what we repeatedly do. Excellence, then, is not an act, but a habit.\n\n"
        "–ü–æ—Å–º–æ—Ç—Ä–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.",
        reply_markup=kb
    )

# === HELP ===
@dp.message_handler(commands=["help"])
async def help_cmd(message: types.Message):
    await message.answer(
        "üß≠ –ö–æ–º–∞–Ω–¥—ã:\n"
        "/train ‚Äì –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É\n"
        "/review ‚Äì –ø–æ–≤—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/stats ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/leaderboard ‚Äì —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/goal N ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /goal 20)\n"
        "/reset_topic ‚Äì —Å–±—Ä–æ—Å —Ç–µ–º—ã\n"
        "/reset ‚Äì –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å\n"
    )

# === –£–°–¢–ê–ù–û–í–ö–ê –¶–ï–õ–ò ===
@dp.message_handler(commands=["goal"])
async def set_goal(message: types.Message):
    uid = str(message.chat.id)
    parts = message.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /goal 15 (—á–∏—Å–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –¥–µ–Ω—å).")
    goal = int(parts[1])
    udata = progress.setdefault(uid, {})
    udata["goal_per_day"] = goal
    save_progress(progress)
    await message.answer(f"üéØ –ù–æ–≤–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å: {goal} –∫–∞—Ä—Ç–æ—á–µ–∫.")

# === –¢–†–ï–ù–ò–†–û–í–ö–ê ===
@dp.message_handler(commands=["train"])
async def choose_topic(message: types.Message):
    kb = types.InlineKeyboardMarkup(row_width=2)
    for t in TOPICS:
        kb.insert(types.InlineKeyboardButton(t, callback_data=f"train_{t}"))
    await message.answer("üéØ –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=kb)

# === –ü–û–í–¢–û–† ===
@dp.message_handler(commands=["review"])
async def review_today(message: types.Message):
    uid = str(message.chat.id)
    udata = progress.get(uid, {"cards": {}})
    due = [int(qid) for qid, info in udata.get("cards", {}).items() if is_due(info.get("next_review"))]
    if not due:
        return await message.answer("‚úÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –∫ –ø–æ–≤—Ç–æ—Ä—É.")
    await message.answer(f"üìò –°–µ–≥–æ–¥–Ω—è –∫ –ø–æ–≤—Ç–æ—Ä—É {len(due)} –∫–∞—Ä—Ç–æ—á–µ–∫.")
    qid = random.choice(due)
    await send_question_text(uid, Q_BY_ID[qid])

# === –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´ ===
async def send_question_text(chat_id, q):
    qid = int(q["id"])
    text = f"üß† {q.get('topic', '–í–æ–ø—Ä–æ—Å')}\n\n{q['question']}\n\n" + "\n".join(
        f"{i+1}) {opt}" for i, opt in enumerate(q["options"])
    )
    kb = types.InlineKeyboardMarkup(row_width=3)
    for i in range(len(q["options"])):
        kb.insert(types.InlineKeyboardButton(str(i + 1), callback_data=f"a:{qid}:{i+1}"))
    kb.add(types.InlineKeyboardButton("‚è≠ –î–∞–ª–µ–µ", callback_data="next"))
    for part in split_text(text):
        await bot.send_message(chat_id, part, reply_markup=kb)

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
@dp.message_handler(commands=["stats"])
async def stats(message: types.Message):
    uid = str(message.chat.id)
    u = progress.get(uid, {"cards": {}, "topics": {}, "streak": 0, "goal_per_day": 10, "done_today": 0})
    streak = u.get("streak", 0)
    goal = u.get("goal_per_day", 10)
    done = u.get("done_today", 0)
    total = len(u.get("cards", {}))
    due = sum(1 for c in u["cards"].values() if is_due(c.get("next_review")))
    accuracy = 0
    total_correct = sum(t["correct"] for t in u.get("topics", {}).values())
    total_answers = sum(t["total"] for t in u.get("topics", {}).values())
    if total_answers:
        accuracy = round(total_correct / total_answers * 100)
    await message.answer(
        f"üéØ –¶–µ–ª—å: {goal} –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –¥–µ–Ω—å\n"
        f"üìä –°–µ–≥–æ–¥–Ω—è: {done}/{goal}\n"
        f"üî• –°–µ—Ä–∏—è: {streak} –¥–Ω.\n"
        f"üìò –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total}\n"
        f"üìÖ –ö –ø–æ–≤—Ç–æ—Ä—É: {due}\n"
        f"üíØ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: {accuracy}%"
    )

# === –£–°–¢–ê–ù–û–í–ö–ê –ö–û–ú–ê–ù–î ===
async def set_commands():
    cmds = [
        types.BotCommand("start", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"),
        types.BotCommand("help", "–ü–æ–º–æ—â—å"),
        types.BotCommand("train", "–í—ã–±–æ—Ä —Ç–µ–º—ã"),
        types.BotCommand("review", "–ü–æ–≤—Ç–æ—Ä"),
        types.BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.BotCommand("goal", "–¶–µ–ª—å –Ω–∞ –¥–µ–Ω—å"),
        types.BotCommand("reset", "–°–±—Ä–æ—Å")
    ]
    await bot.set_my_commands(cmds)

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram...")
    loop = asyncio.get_event_loop()
    loop.create_task(set_commands())
    executor.start_polling(dp)
